[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "FMON Documentation",
    "section": "",
    "text": "Welcome to the documentation for Smear Lab’s Freely Moving Olfactory Navigation (FMON) behavioral rig.\nThe rig’s hardware is controlled by a Bpod state machine running in MATLAB and receiving realtime input from Bonsai. All data related to trial state is recorded by Bpod, while all analog electrical signals (e.g. sniff signal) are recorded by Bonsai.\nThe rig can be run either directly from the Bpod Console, or using a custom GUI that was built with specific experiments in mind."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "This documentation is organized as a record and reference for the 2023 Build of Smear Lab’s Freely Moving Olfactory Navigation behavioral rig. All materials were produced by Nate Gonzales-Hess for the Smear Lab in fulfillment of his Supporting Area Project in the University of Oregon Psychology PhD Program."
  },
  {
    "objectID": "gui.html",
    "href": "gui.html",
    "title": "MATLAB GUI",
    "section": "",
    "text": "Instructions for how to use the FMON MATLAB GUI to run experiments"
  },
  {
    "objectID": "bonsai.html",
    "href": "bonsai.html",
    "title": "Bonsai",
    "section": "",
    "text": "Overview of FMON Bonsai file.\nDo a diagram showing what each branch of the tree does. Maybe give a brief code sample of how the IPython sinks work.\nShow how DAQ outputs work."
  },
  {
    "objectID": "bpod.html",
    "href": "bpod.html",
    "title": "Bpod Protocol",
    "section": "",
    "text": "This page includes all code used in the fmon_task.m protocol, along with a graph describing the flow of the Bpod finite state machine. You may click a node in the the graph to be taken to the relevant code block.\nThe protocol is designed to be run in conjunction with Bonsai, which uses realtime video tracking to provide SoftCodes to Bpod. SoftCode1 indicates that the mouse has crossed the decision line on the left side, Softcode3 indicates that the mouse has crossed on the right, and SoftCode2 indicates that the mouse has not yet crossed the decision line.\n\nState Machine Flow\n\n\n\n\ngraph TD\n    OdorantState --&gt; OdorLeft\n    OdorantState --&gt; OdorRight\n    OdorantState --&gt; OdorOmitLeft\n    OdorantState --&gt; OdorOmitRight\n    OdorLeft --&gt; WaitForInitPoke\n    OdorRight --&gt; WaitForInitPoke\n    OdorOmitLeft --&gt; WaitForInitPoke\n    OdorOmitRight --&gt; WaitForInitPoke\n    WaitForInitPoke --&gt;|Port3In| StateOnInitPoke\n    StateOnInitPoke --&gt; GoLeft\n    StateOnInitPoke --&gt; GoRight\n    GoLeft --&gt;|SoftCode1| CorrectLeft\n    GoLeft --&gt;|SoftCode3| NoReward\n    GoRight --&gt;|SoftCode1| NoReward\n    GoRight --&gt;|SoftCode3| CorrectRight\n    CorrectLeft --&gt;|Port1In| LeftReward\n    CorrectRight --&gt;|Port2In| RightReward\n    NoReward --&gt; ITI\n    LeftReward --&gt; Drinking\n    RightReward --&gt; Drinking\n    Drinking --&gt;|Tup, Port1Out, Port2Out| ITI\n    ITI --&gt; OdorantState\n\n\n\n\n\n\n\nInitialize Bpod\nfunction fmon_task\n%% Initialize Bpod\nglobal BpodSystem\nS = BpodSystem.ProtocolSettings; \n\n%Clear Bpod TCP Socket\nBpodSystem.BonsaiSocket = [];\n\n% Run Bonsai connect Python Script\n[~,~] = system('start C:\\ProgramData\\Anaconda3\\python.exe D:\\fmon-bpod\\connect_gui.py');\n\n% Connect Bpod to Bonsai\nBpodSystem.BonsaiSocket = TCPCom(11235);\n\n\nSession Timer\n%% Set Up Session Timer\n% Get duration from GUI, or use default of 40 minutes.\nif evalin('base', 'exist(''session_duration'', ''var'')')\n    session_duration = evalin('base', 'session_duration');\nelse\n    session_duration = 40;\nend\n\npersistent t  % Declaring t as global so it can be accessed outside function\n\n% If timer from cancelled session is running, stop and delete it.\nif exist('t', 'var') == 1 && isa(t, 'timer')\n    if strcmp(t.Running, 'on')\n        stop(t);\n        disp('Previously started timer stopped.')\n    end\n    delete(t);\nend\n\n% Initialize session timer.\nt = timer;\nt.StartDelay = session_duration * 60;  % time in seconds\n% timeUp is defined at end of this file.\nt.TimerFcn = @(obj, event)timeUp(obj, event, session_duration);  \n\nstart(t);\n\n\nSet up Reward Timings\n%% Set Reward amounts\n% Read variables from workspace, supplied by fmon_prefs.m GUI.\n% If Variables don't exist, set to defaults (.1 seconds)\nif evalin('base', 'exist(''LeftValveTime'', ''var'')')\n    LeftValveTime = evalin('base', 'LeftValveTime');\nelse\n    LeftValveTime = 0.1;\nend\n\nif evalin('base', 'exist(''RightValveTime'', ''var'')')\n    RightValveTime = evalin('base', 'RightValveTime');\nelse\n    RightValveTime = 0.1;\nend\n\n% Time to wait before lick port out is confirmed\nPortOutDelay = .5;\n\n% Time to wait for poke after decision. On timeout, ITI begins.\nPokeTimer = 5;\n\n\nGenerate Trials\n%% Define trials\nnLeftTrials = 100;\nnRightTrials = 100;\npctOmission = evalin('base', 'pct_omission') / 100;\nnOmissionTrials = round((nLeftTrials + nRightTrials) * pctOmission);  % Some percentage of trials are omission trials.\nnOmissionDiff = round(0.5 * nOmissionTrials);  % Half of the omission trials, to substract from left and right trials.\nTrialTypes = [ones(1, nLeftTrials-nOmissionDiff) ones(1, nRightTrials-nOmissionDiff)*2 ones(1, round(nOmissionTrials/2))*3 ones(1, round(nOmissionTrials/2))*4];  % 1 = Left, 2 = Right, 3 = Omission Left, 4 = Omission Right\n\n% Ensure that trial type never repeats more than maxRepeats times\nmaxRepeats = 3; % maximum repeat limit\n\n% A function to check if any element repeats more than maxRepeats times\ncheckRepeats = @(v, m) any(conv(double(diff(v) == 0), ones(1, m), 'valid') == m);\n\n% Randomly permute vector until no element repeats more than maxRepeats times\nwhile true\n    vec_perm = TrialTypes(randperm(length(TrialTypes)));\n    if ~checkRepeats(vec_perm, maxRepeats)\n        break\n    end\nend\n\nassignin('base', 'vec_perm', vec_perm);\n\nTrialTypes = vec_perm;\nBpodSystem.Data.TrialTypes = []; % The trial type of each trial completed will be added here.\nMaxTrials = length(TrialTypes);%nLeftTrials + nRightTrials + nOmissionTrials;\n\n%% Build ITI list\n% Read variables from workspace, supplied by fmon_prefs GUI.\nif evalin('base', 'exist(''min_iti'', ''var'')')\n    min_iti = evalin('base', 'min_iti');\nelse\n    min_iti = 1;\nend\n\nif evalin('base', 'exist(''max_iti'', ''var'')')\n    max_iti = evalin('base', 'max_iti');\nelse\n    max_iti = 5;\nend\n\n% Create ITI list\niti_list = round((max_iti-min_iti) .* rand(1,length(TrialTypes)) + min_iti);\n\n\nTrial Outcome Plots\nBpodSystem.ProtocolFigures.OutcomePlotFig = figure('Position', [50 540 1000 250],'name','Outcome plot','numbertitle','off', 'MenuBar', 'none', 'Resize', 'off');\nBpodSystem.GUIHandles.OutcomePlot = axes('Position', [.075 .3 .89 .6]);\nTrialTypeOutcomePlot(BpodSystem.GUIHandles.OutcomePlot,'init',TrialTypes);\n\n\nBegin Trial Loop\n%% Main trial loop\nfor currentTrial = 1:MaxTrials\n    \n    % Valve Module serial messages, 1 = Odor, 2 = Omission, 3 = Reset\n    LoadSerialMessages('ValveModule1', {['B' 15], ['B' 195], ['B' 0]});  % Left valves: 15 = Odor, 195 = Omission, 0 = Reset\n    LoadSerialMessages('ValveModule2', {['B' 15], ['B' 195], ['B' 0]});  % Right valves: 15 = Odor, 195 = Omission, 0 = Reset\n    LoadSerialMessages('ValveModule3', {['B' 3], ['B' 0]});  % Final Valves\n    \n    % Determine trial-specific state matrix fields\n    switch TrialTypes(currentTrial)\n        case 1\n            StateOnInitPoke = 'GoLeft';\n            OdorantState = 'OdorLeft';\n        case 2\n            StateOnInitPoke = 'GoRight'; \n            OdorantState = 'OdorRight';\n        case 3\n            StateOnInitPoke = 'GoLeft'; \n            OdorantState = 'OdorOmitLeft';\n        case 4\n            StateOnInitPoke = 'GoRight'; \n            OdorantState = 'OdorOmitRight';\n    end\n\n\nStates\n    sma = AddState(sma, 'Name', 'Reset', ...\n        'Timer', .5,...\n        'StateChangeConditions', {'Tup', OdorantState},...\n        'OutputActions', {'ValveModule1', 3, 'ValveModule2', 3, 'ValveModule3', 2});  % Reset all valves to 0V\n\n    sma = AddState(sma, 'Name', 'OdorLeft', ...\n        'Timer', 1,...\n        'StateChangeConditions', {'Tup', 'WaitForInitPoke'},...\n        'OutputActions', {'ValveModule1', 1, 'ValveModule2', 2});  % Left odor, right omission\n\n    sma = AddState(sma, 'Name', 'OdorLeft', ...\n            'Timer', 1,...\n            'StateChangeConditions', {'Tup', 'WaitForInitPoke'},...\n            'OutputActions', {'ValveModule1', 1, 'ValveModule2', 2});  % Left odor, right omission\n\n    sma = AddState(sma, 'Name', 'OdorRight', ...\n        'Timer', 1,...\n        'StateChangeConditions', {'Tup', 'WaitForInitPoke'},...\n        'OutputActions', {'ValveModule1', 2, 'ValveModule2', 1});  % Left omission, right odor\n\n    sma = AddState(sma, 'Name', 'OdorOmitLeft', ...\n        'Timer', 1,...\n        'StateChangeConditions', {'Tup', 'WaitForInitPoke'},...\n        'OutputActions', {'ValveModule1', 2, 'ValveModule2', 0});  % Left omission , Right reset (flow through dummy vial)\n\n    sma = AddState(sma, 'Name', 'OdorOmitRight', ...\n        'Timer', 1,...\n        'StateChangeConditions', {'Tup', 'WaitForInitPoke'},...\n        'OutputActions', {'ValveModule1', 0, 'ValveModule2', 2});  % Left dummy , Right omission.\n\n    sma = AddState(sma, 'Name', 'WaitForInitPoke', ...\n        'Timer', 0,...\n        'StateChangeConditions', {'Port3In', StateOnInitPoke},...  % Wait for initiation port poke\n        'OutputActions', {});\n\n    sma = AddState(sma, 'Name', 'GoLeft', ...\n        'Timer', 0,...\n        'StateChangeConditions', {'SoftCode1', 'CorrectLeft', 'SoftCode3', 'NoReward'},...\n        'OutputActions', {'ValveModule3', 1});  % Final valves open\n\n    sma = AddState(sma, 'Name', 'GoRight', ...\n        'Timer', 0,...\n        'StateChangeConditions', {'SoftCode1', 'NoReward', 'SoftCode3', 'CorrectRight'},...\n        'OutputActions', {'ValveModule3', 1});  % Final valves open\n\n    sma = AddState(sma, 'Name', 'Omission', ...\n        'Timer', 0,...\n        'StateChangeConditions', {'SoftCode1', 'NoReward', 'SoftCode3', 'NoReward'},...  % Reward on either side\n        'OutputActions', {'ValveModule3', 1});  % Final valves open\n\n    sma = AddState(sma, 'Name', 'CorrectLeft', ...\n        'Timer', PokeTimer,...\n        'StateChangeConditions', {'Tup', 'ITI', 'Port1In', 'LeftReward'},...\n        'OutputActions', {});  % On decision, reset all valves\n\n    sma = AddState(sma, 'Name', 'CorrectRight', ...\n        'Timer', PokeTimer,...\n        'StateChangeConditions', {'Tup', 'ITI', 'Port2In', 'RightReward'},...\n        'OutputActions', {});  % On decision, reset all valves\n\n    sma = AddState(sma, 'Name', 'NoReward', ... \n        'Timer', PokeTimer,...\n        'StateChangeConditions', {'Tup', 'ITI', 'Port1In', 'ITI', 'Port2In', 'ITI', 'Port3In', 'ITI'},...\n        'OutputActions', {'ValveModule1', 3, 'ValveModule2', 3, 'ValveModule3', 2}); % On decision, reset all valves\n\n    sma = AddState(sma, 'Name', 'LeftReward', ...\n        'Timer', LeftValveTime,...\n        'StateChangeConditions', {'Tup', 'Drinking'},...\n        'OutputActions', {'ValveState', 1, 'ValveModule1', 3, 'ValveModule2', 3, 'ValveModule3', 2});  % On left poke give water & reset valves.\n\n    sma = AddState(sma, 'Name', 'RightReward', ...\n        'Timer', RightValveTime,...\n        'StateChangeConditions', {'Tup', 'Drinking'},...\n        'OutputActions', {'ValveState', 2, 'ValveModule1', 3, 'ValveModule2', 3, 'ValveModule3', 2});  % On right poke give water & reset valves.\n\n    sma = AddState(sma, 'Name', 'Drinking', ...\n        'Timer', 5,...\n        'StateChangeConditions', {'Tup', 'ITI', 'Port1Out', 'ConfirmPortOut', 'Port2Out', 'ConfirmPortOut'},... \n        'OutputActions', {});\n\n    sma = AddState(sma, 'Name', 'ConfirmPortOut', ...\n        'Timer', PortOutDelay,...\n        'StateChangeConditions', {'Tup', 'ITI', 'Port1In', 'Drinking', 'Port2In', 'Drinking'},...\n        'OutputActions', {});\n\n    sma = AddState(sma, 'Name', 'ITI', ... \n        'Timer', iti_list(currentTrial),...\n        'StateChangeConditions', {'Tup', 'exit'},...\n        'OutputActions', {}); \n\n\nEnd Trial Loop\nT = BpodTrialManager;\n    T.startTrial(sma)\n    RawEvents = T.getTrialData;\n    if ~isempty(fieldnames(RawEvents)) % If trial data was returned\n        BpodSystem.Data = AddTrialEvents(BpodSystem.Data,RawEvents); %  Computes trial events from raw data\n        BpodSystem.Data.TrialSettings(currentTrial) = S; % Adds the settings used for the current trial to the Data struct (to be saved after the trial ends)\n        BpodSystem.Data.TrialTypes(currentTrial) = TrialTypes(currentTrial); % Adds the trial type of the current trial to data\n        UpdateOutcomePlot(TrialTypes, BpodSystem.Data);\n        SaveBpodSessionData; % Saves the field BpodSystem.Data to the current data file\n    end\n    HandlePauseCondition; % Checks to see if the protocol is paused. If so, waits until user resumes.\n    if BpodSystem.Status.BeingUsed == 0\n        return\n    end\nend\n\n\nUpdate Outcome Plot\nfunction UpdateOutcomePlot(TrialTypes, Data)\n    global BpodSystem\n    Outcomes = zeros(1,Data.nTrials);\n    for x = 1:Data.nTrials\n        if ~isnan(Data.RawEvents.Trial{x}.States.Drinking(1))\n            Outcomes(x) = 1;\n        else\n            Outcomes(x) = 3;\n        end\n    end\n    TrialTypeOutcomePlot(BpodSystem.GUIHandles.OutcomePlot,'update',Data.nTrials+1,TrialTypes,Outcomes);\n\n\ntimeUp Function\n%% Execute when time is up:\nfunction timeUp(obj, event, duration)\n    disp(num2str(duration) + \" minutes have elapsed! The session has ended.\");  % Print to console, maybe make this an alert\n    %SaveBpodSessionData();  % Save Session Data to Bpod data folder\n    BpodSystem.BonsaiSocket = [];  % Stop the connection to Bonsai.\n    RunProtocol('Stop');  % Stop the protocol\n    java.lang.Thread.sleep(1000);\n\n    [~,~] = system('start C:\\ProgramData\\Anaconda3\\python.exe D:\\fmon-bpod\\disconnect_gui.py'); % Stop Bonsai\n    disp('Running data output script...');\n    run('D:\\fmon-bpod\\fmon_data_output.m'); % Run data processing script"
  },
  {
    "objectID": "electronics.html",
    "href": "electronics.html",
    "title": "Electronics",
    "section": "",
    "text": "Circuit Diagrams and parts list."
  },
  {
    "objectID": "cad.html",
    "href": "cad.html",
    "title": "CAD Files",
    "section": "",
    "text": "CAD Files of FMON enclosure and lick ports.\nMaybe integrate a 3d model viewer if easy."
  },
  {
    "objectID": "bpod.html#my-section",
    "href": "bpod.html#my-section",
    "title": "Bpod",
    "section": "Initialize Bpod",
    "text": "Initialize Bpod\nfunction fmon_task\n%% Initialize Bpod\nglobal BpodSystem\nS = BpodSystem.ProtocolSettings; \n\n%Clear Bpod TCP Socket\nBpodSystem.BonsaiSocket = [];\n\n% Run Bonsai connect Python Script\n[~,~] = system('start C:\\ProgramData\\Anaconda3\\python.exe D:\\fmon-bpod\\connect_gui.py');\n\n% Connect Bpod to Bonsai\nBpodSystem.BonsaiSocket = TCPCom(11235);"
  },
  {
    "objectID": "bpod.html#initialize",
    "href": "bpod.html#initialize",
    "title": "Bpod",
    "section": "Initialize Bpod",
    "text": "Initialize Bpod\nfunction fmon_task\n%% Initialize Bpod\nglobal BpodSystem\nS = BpodSystem.ProtocolSettings; \n\n%Clear Bpod TCP Socket\nBpodSystem.BonsaiSocket = [];\n\n% Run Bonsai connect Python Script\n[~,~] = system('start C:\\ProgramData\\Anaconda3\\python.exe D:\\fmon-bpod\\connect_gui.py');\n\n% Connect Bpod to Bonsai\nBpodSystem.BonsaiSocket = TCPCom(11235);"
  },
  {
    "objectID": "bpod.html#session-timer",
    "href": "bpod.html#session-timer",
    "title": "Bpod",
    "section": "Session Timer",
    "text": "Session Timer\n%% Set Up Session Timer\n% Get duration from GUI, or use default of 40 minutes.\nif evalin('base', 'exist(''session_duration'', ''var'')')\n    session_duration = evalin('base', 'session_duration');\nelse\n    session_duration = 40;\nend\n\npersistent t  % Declaring t as global so it can be accessed outside function\n\n% If timer from cancelled session is running, stop and delete it.\nif exist('t', 'var') == 1 && isa(t, 'timer')\n    if strcmp(t.Running, 'on')\n        stop(t);\n        disp('Previously started timer stopped.')\n    end\n    delete(t);\nend\n\n% Initialize session timer.\nt = timer;\nt.StartDelay = session_duration * 60;  % time in seconds\n% timeUp is defined at end of this file.\nt.TimerFcn = @(obj, event)timeUp(obj, event, session_duration);  \n\nstart(t);"
  },
  {
    "objectID": "bpod.html#generate_trials",
    "href": "bpod.html#generate_trials",
    "title": "Bpod",
    "section": "Generate Trials",
    "text": "Generate Trials\n%% Define trials\nnLeftTrials = 100;\nnRightTrials = 100;\npctOmission = evalin('base', 'pct_omission') / 100;\nnOmissionTrials = round((nLeftTrials + nRightTrials) * pctOmission);  % Some percentage of trials are omission trials.\nnOmissionDiff = round(0.5 * nOmissionTrials);  % Half of the omission trials, to substract from left and right trials.\nTrialTypes = [ones(1, nLeftTrials-nOmissionDiff) ones(1, nRightTrials-nOmissionDiff)*2 ones(1, round(nOmissionTrials/2))*3 ones(1, round(nOmissionTrials/2))*4];  % 1 = Left, 2 = Right, 3 = Omission Left, 4 = Omission Right\n\n% Ensure that trial type never repeats more than maxRepeats times\nmaxRepeats = 3; % maximum repeat limit\n\n% A function to check if any element repeats more than maxRepeats times\ncheckRepeats = @(v, m) any(conv(double(diff(v) == 0), ones(1, m), 'valid') == m);\n\n% Randomly permute vector until no element repeats more than maxRepeats times\nwhile true\n    vec_perm = TrialTypes(randperm(length(TrialTypes)));\n    if ~checkRepeats(vec_perm, maxRepeats)\n        break\n    end\nend\n\nassignin('base', 'vec_perm', vec_perm);\n\nTrialTypes = vec_perm;\nBpodSystem.Data.TrialTypes = []; % The trial type of each trial completed will be added here.\nMaxTrials = length(TrialTypes);%nLeftTrials + nRightTrials + nOmissionTrials;\n\n%% Build ITI list\n% Read variables from workspace, supplied by fmon_prefs GUI.\nif evalin('base', 'exist(''min_iti'', ''var'')')\n    min_iti = evalin('base', 'min_iti');\nelse\n    min_iti = 1;\nend\n\nif evalin('base', 'exist(''max_iti'', ''var'')')\n    max_iti = evalin('base', 'max_iti');\nelse\n    max_iti = 5;\nend\n\n% Create ITI list\niti_list = round((max_iti-min_iti) .* rand(1,length(TrialTypes)) + min_iti);"
  },
  {
    "objectID": "bpod.html#set-up-reward-timings",
    "href": "bpod.html#set-up-reward-timings",
    "title": "Bpod",
    "section": "Set up Reward Timings",
    "text": "Set up Reward Timings\n%% Set Reward amounts\n% Read variables from workspace, supplied by fmon_prefs.m GUI.\n% If Variables don't exist, set to defaults (.1 seconds)\nif evalin('base', 'exist(''LeftValveTime'', ''var'')')\n    LeftValveTime = evalin('base', 'LeftValveTime');\nelse\n    LeftValveTime = 0.1;\nend\n\nif evalin('base', 'exist(''RightValveTime'', ''var'')')\n    RightValveTime = evalin('base', 'RightValveTime');\nelse\n    RightValveTime = 0.1;\nend\n\n% Time to wait before lick port out is confirmed\nPortOutDelay = .5;\n\n% Time to wait for poke after decision. On timeout, ITI begins.\nPokeTimer = 5;"
  },
  {
    "objectID": "bpod.html#session_timer",
    "href": "bpod.html#session_timer",
    "title": "Bpod",
    "section": "Session Timer",
    "text": "Session Timer\n%% Set Up Session Timer\n% Get duration from GUI, or use default of 40 minutes.\nif evalin('base', 'exist(''session_duration'', ''var'')')\n    session_duration = evalin('base', 'session_duration');\nelse\n    session_duration = 40;\nend\n\npersistent t  % Declaring t as global so it can be accessed outside function\n\n% If timer from cancelled session is running, stop and delete it.\nif exist('t', 'var') == 1 && isa(t, 'timer')\n    if strcmp(t.Running, 'on')\n        stop(t);\n        disp('Previously started timer stopped.')\n    end\n    delete(t);\nend\n\n% Initialize session timer.\nt = timer;\nt.StartDelay = session_duration * 60;  % time in seconds\n% timeUp is defined at end of this file.\nt.TimerFcn = @(obj, event)timeUp(obj, event, session_duration);  \n\nstart(t);"
  },
  {
    "objectID": "bpod.html#set-up-reward-timings-reward_timings",
    "href": "bpod.html#set-up-reward-timings-reward_timings",
    "title": "Bpod",
    "section": "Set up Reward Timings {reward_timings}",
    "text": "Set up Reward Timings {reward_timings}\n%% Set Reward amounts\n% Read variables from workspace, supplied by fmon_prefs.m GUI.\n% If Variables don't exist, set to defaults (.1 seconds)\nif evalin('base', 'exist(''LeftValveTime'', ''var'')')\n    LeftValveTime = evalin('base', 'LeftValveTime');\nelse\n    LeftValveTime = 0.1;\nend\n\nif evalin('base', 'exist(''RightValveTime'', ''var'')')\n    RightValveTime = evalin('base', 'RightValveTime');\nelse\n    RightValveTime = 0.1;\nend\n\n% Time to wait before lick port out is confirmed\nPortOutDelay = .5;\n\n% Time to wait for poke after decision. On timeout, ITI begins.\nPokeTimer = 5;"
  },
  {
    "objectID": "bpod.html#outcome_plot",
    "href": "bpod.html#outcome_plot",
    "title": "Bpod",
    "section": "Trial Outcome Plots",
    "text": "Trial Outcome Plots\nBpodSystem.ProtocolFigures.OutcomePlotFig = figure('Position', [50 540 1000 250],'name','Outcome plot','numbertitle','off', 'MenuBar', 'none', 'Resize', 'off');\nBpodSystem.GUIHandles.OutcomePlot = axes('Position', [.075 .3 .89 .6]);\nTrialTypeOutcomePlot(BpodSystem.GUIHandles.OutcomePlot,'init',TrialTypes);"
  },
  {
    "objectID": "bpod.html#session_loop",
    "href": "bpod.html#session_loop",
    "title": "Bpod",
    "section": "Begin Trial Loop",
    "text": "Begin Trial Loop\n%% Main trial loop\nfor currentTrial = 1:MaxTrials\n    \n    % Valve Module serial messages, 1 = Odor, 2 = Omission, 3 = Reset\n    LoadSerialMessages('ValveModule1', {['B' 15], ['B' 195], ['B' 0]});  % Left valves: 15 = Odor, 195 = Omission, 0 = Reset\n    LoadSerialMessages('ValveModule2', {['B' 15], ['B' 195], ['B' 0]});  % Right valves: 15 = Odor, 195 = Omission, 0 = Reset\n    LoadSerialMessages('ValveModule3', {['B' 3], ['B' 0]});  % Final Valves\n    \n    % Determine trial-specific state matrix fields\n    switch TrialTypes(currentTrial)\n        case 1\n            StateOnInitPoke = 'GoLeft';\n            OdorantState = 'OdorLeft';\n        case 2\n            StateOnInitPoke = 'GoRight'; \n            OdorantState = 'OdorRight';\n        case 3\n            StateOnInitPoke = 'GoLeft'; \n            OdorantState = 'OdorOmitLeft';\n        case 4\n            StateOnInitPoke = 'GoRight'; \n            OdorantState = 'OdorOmitRight';\n    end"
  },
  {
    "objectID": "bpod.html#state_machine",
    "href": "bpod.html#state_machine",
    "title": "Bpod",
    "section": "States",
    "text": "States\n    sma = AddState(sma, 'Name', 'Reset', ...\n        'Timer', .5,...\n        'StateChangeConditions', {'Tup', OdorantState},...\n        'OutputActions', {'ValveModule1', 3, 'ValveModule2', 3, 'ValveModule3', 2});  % Reset all valves to 0V\n\n    sma = AddState(sma, 'Name', 'OdorLeft', ...\n        'Timer', 1,...\n        'StateChangeConditions', {'Tup', 'WaitForInitPoke'},...\n        'OutputActions', {'ValveModule1', 1, 'ValveModule2', 2});  % Left odor, right omission\n\n    sma = AddState(sma, 'Name', 'OdorLeft', ...\n            'Timer', 1,...\n            'StateChangeConditions', {'Tup', 'WaitForInitPoke'},...\n            'OutputActions', {'ValveModule1', 1, 'ValveModule2', 2});  % Left odor, right omission\n\n    sma = AddState(sma, 'Name', 'OdorRight', ...\n        'Timer', 1,...\n        'StateChangeConditions', {'Tup', 'WaitForInitPoke'},...\n        'OutputActions', {'ValveModule1', 2, 'ValveModule2', 1});  % Left omission, right odor\n\n    sma = AddState(sma, 'Name', 'OdorOmitLeft', ...\n        'Timer', 1,...\n        'StateChangeConditions', {'Tup', 'WaitForInitPoke'},...\n        'OutputActions', {'ValveModule1', 2, 'ValveModule2', 0});  % Left omission , Right reset (flow through dummy vial)\n\n    sma = AddState(sma, 'Name', 'OdorOmitRight', ...\n        'Timer', 1,...\n        'StateChangeConditions', {'Tup', 'WaitForInitPoke'},...\n        'OutputActions', {'ValveModule1', 0, 'ValveModule2', 2});  % Left dummy , Right omission.\n\n    sma = AddState(sma, 'Name', 'WaitForInitPoke', ...\n        'Timer', 0,...\n        'StateChangeConditions', {'Port3In', StateOnInitPoke},...  % Wait for initiation port poke\n        'OutputActions', {});\n\n    sma = AddState(sma, 'Name', 'GoLeft', ...\n        'Timer', 0,...\n        'StateChangeConditions', {'SoftCode1', 'CorrectLeft', 'SoftCode3', 'NoReward'},...\n        'OutputActions', {'ValveModule3', 1});  % Final valves open\n\n    sma = AddState(sma, 'Name', 'GoRight', ...\n        'Timer', 0,...\n        'StateChangeConditions', {'SoftCode1', 'NoReward', 'SoftCode3', 'CorrectRight'},...\n        'OutputActions', {'ValveModule3', 1});  % Final valves open\n\n    sma = AddState(sma, 'Name', 'Omission', ...\n        'Timer', 0,...\n        'StateChangeConditions', {'SoftCode1', 'NoReward', 'SoftCode3', 'NoReward'},...  % Reward on either side\n        'OutputActions', {'ValveModule3', 1});  % Final valves open\n\n    sma = AddState(sma, 'Name', 'CorrectLeft', ...\n        'Timer', PokeTimer,...\n        'StateChangeConditions', {'Tup', 'ITI', 'Port1In', 'LeftReward'},...\n        'OutputActions', {});  % On decision, reset all valves\n\n    sma = AddState(sma, 'Name', 'CorrectRight', ...\n        'Timer', PokeTimer,...\n        'StateChangeConditions', {'Tup', 'ITI', 'Port2In', 'RightReward'},...\n        'OutputActions', {});  % On decision, reset all valves\n\n    sma = AddState(sma, 'Name', 'NoReward', ... \n        'Timer', PokeTimer,...\n        'StateChangeConditions', {'Tup', 'ITI', 'Port1In', 'ITI', 'Port2In', 'ITI', 'Port3In', 'ITI'},...\n        'OutputActions', {'ValveModule1', 3, 'ValveModule2', 3, 'ValveModule3', 2}); % On decision, reset all valves\n\n    sma = AddState(sma, 'Name', 'LeftReward', ...\n        'Timer', LeftValveTime,...\n        'StateChangeConditions', {'Tup', 'Drinking'},...\n        'OutputActions', {'ValveState', 1, 'ValveModule1', 3, 'ValveModule2', 3, 'ValveModule3', 2});  % On left poke give water & reset valves.\n\n    sma = AddState(sma, 'Name', 'RightReward', ...\n        'Timer', RightValveTime,...\n        'StateChangeConditions', {'Tup', 'Drinking'},...\n        'OutputActions', {'ValveState', 2, 'ValveModule1', 3, 'ValveModule2', 3, 'ValveModule3', 2});  % On right poke give water & reset valves.\n\n    sma = AddState(sma, 'Name', 'Drinking', ...\n        'Timer', 5,...\n        'StateChangeConditions', {'Tup', 'ITI', 'Port1Out', 'ConfirmPortOut', 'Port2Out', 'ConfirmPortOut'},... \n        'OutputActions', {});\n\n    sma = AddState(sma, 'Name', 'ConfirmPortOut', ...\n        'Timer', PortOutDelay,...\n        'StateChangeConditions', {'Tup', 'ITI', 'Port1In', 'Drinking', 'Port2In', 'Drinking'},...\n        'OutputActions', {});\n\n    sma = AddState(sma, 'Name', 'ITI', ... \n        'Timer', iti_list(currentTrial),...\n        'StateChangeConditions', {'Tup', 'exit'},...\n        'OutputActions', {});"
  },
  {
    "objectID": "bpod.html#reward_timings",
    "href": "bpod.html#reward_timings",
    "title": "Bpod",
    "section": "Set up Reward Timings",
    "text": "Set up Reward Timings\n%% Set Reward amounts\n% Read variables from workspace, supplied by fmon_prefs.m GUI.\n% If Variables don't exist, set to defaults (.1 seconds)\nif evalin('base', 'exist(''LeftValveTime'', ''var'')')\n    LeftValveTime = evalin('base', 'LeftValveTime');\nelse\n    LeftValveTime = 0.1;\nend\n\nif evalin('base', 'exist(''RightValveTime'', ''var'')')\n    RightValveTime = evalin('base', 'RightValveTime');\nelse\n    RightValveTime = 0.1;\nend\n\n% Time to wait before lick port out is confirmed\nPortOutDelay = .5;\n\n% Time to wait for poke after decision. On timeout, ITI begins.\nPokeTimer = 5;"
  },
  {
    "objectID": "hardware.html",
    "href": "hardware.html",
    "title": "Electronics",
    "section": "",
    "text": "Circuit Diagrams and parts list."
  },
  {
    "objectID": "bpod.html#end-trial-loop",
    "href": "bpod.html#end-trial-loop",
    "title": "Bpod",
    "section": "End Trial Loop",
    "text": "End Trial Loop\nT = BpodTrialManager;\n    T.startTrial(sma)\n    RawEvents = T.getTrialData;\n    if ~isempty(fieldnames(RawEvents)) % If trial data was returned\n        BpodSystem.Data = AddTrialEvents(BpodSystem.Data,RawEvents); %  Computes trial events from raw data\n        BpodSystem.Data.TrialSettings(currentTrial) = S; % Adds the settings used for the current trial to the Data struct (to be saved after the trial ends)\n        BpodSystem.Data.TrialTypes(currentTrial) = TrialTypes(currentTrial); % Adds the trial type of the current trial to data\n        UpdateOutcomePlot(TrialTypes, BpodSystem.Data);\n        SaveBpodSessionData; % Saves the field BpodSystem.Data to the current data file\n    end\n    HandlePauseCondition; % Checks to see if the protocol is paused. If so, waits until user resumes.\n    if BpodSystem.Status.BeingUsed == 0\n        return\n    end\nend"
  },
  {
    "objectID": "bpod.html#update-outcome-plot",
    "href": "bpod.html#update-outcome-plot",
    "title": "Bpod",
    "section": "Update Outcome Plot",
    "text": "Update Outcome Plot\nfunction UpdateOutcomePlot(TrialTypes, Data)\n    global BpodSystem\n    Outcomes = zeros(1,Data.nTrials);\n    for x = 1:Data.nTrials\n        if ~isnan(Data.RawEvents.Trial{x}.States.Drinking(1))\n            Outcomes(x) = 1;\n        else\n            Outcomes(x) = 3;\n        end\n    end\n    TrialTypeOutcomePlot(BpodSystem.GUIHandles.OutcomePlot,'update',Data.nTrials+1,TrialTypes,Outcomes);"
  },
  {
    "objectID": "bpod.html#timeup-function",
    "href": "bpod.html#timeup-function",
    "title": "Bpod",
    "section": "timeUp Function",
    "text": "timeUp Function\n%% Execute when time is up:\nfunction timeUp(obj, event, duration)\n    disp(num2str(duration) + \" minutes have elapsed! The session has ended.\");  % Print to console, maybe make this an alert\n    %SaveBpodSessionData();  % Save Session Data to Bpod data folder\n    BpodSystem.BonsaiSocket = [];  % Stop the connection to Bonsai.\n    RunProtocol('Stop');  % Stop the protocol\n    java.lang.Thread.sleep(1000);\n\n    [~,~] = system('start C:\\ProgramData\\Anaconda3\\python.exe D:\\fmon-bpod\\disconnect_gui.py'); % Stop Bonsai\n    disp('Running data output script...');\n    run('D:\\fmon-bpod\\fmon_data_output.m'); % Run data processing script"
  },
  {
    "objectID": "bpod.html#state-machine-flow",
    "href": "bpod.html#state-machine-flow",
    "title": "Bpod",
    "section": "State Machine Flow",
    "text": "State Machine Flow\n\n\n\n\ngraph TD\n    OdorantState --&gt; OdorLeft\n    OdorantState --&gt; OdorRight\n    OdorantState --&gt; OdorOmitLeft\n    OdorantState --&gt; OdorOmitRight\n\n    OdorLeft --&gt; WaitForInitPoke\n    OdorRight --&gt; WaitForInitPoke\n    OdorOmitLeft --&gt; WaitForInitPoke\n    OdorOmitRight --&gt; WaitForInitPoke\n    WaitForInitPoke --&gt;|Port3In| StateOnInitPoke\n    StateOnInitPoke --&gt; GoLeft\n    StateOnInitPoke --&gt; GoRight\n    GoLeft --&gt;|SoftCode1| CorrectLeft\n    GoLeft --&gt;|SoftCode3| NoReward\n    GoRight --&gt;|SoftCode1| NoReward\n    GoRight --&gt;|SoftCode3| CorrectRight\n    CorrectLeft --&gt;|Port1In| LeftReward\n    CorrectRight --&gt;|Port2In| RightReward\n    NoReward --&gt; ITI\n    LeftReward --&gt; Drinking\n    RightReward --&gt; Drinking\n    Drinking --&gt;|Tup, Port1Out, Port2Out| ITI\n    ITI --&gt; OdorantState"
  },
  {
    "objectID": "bpod.html#begin_loop",
    "href": "bpod.html#begin_loop",
    "title": "Bpod",
    "section": "Begin Trial Loop",
    "text": "Begin Trial Loop\n%% Main trial loop\nfor currentTrial = 1:MaxTrials\n    \n    % Valve Module serial messages, 1 = Odor, 2 = Omission, 3 = Reset\n    LoadSerialMessages('ValveModule1', {['B' 15], ['B' 195], ['B' 0]});  % Left valves: 15 = Odor, 195 = Omission, 0 = Reset\n    LoadSerialMessages('ValveModule2', {['B' 15], ['B' 195], ['B' 0]});  % Right valves: 15 = Odor, 195 = Omission, 0 = Reset\n    LoadSerialMessages('ValveModule3', {['B' 3], ['B' 0]});  % Final Valves\n    \n    % Determine trial-specific state matrix fields\n    switch TrialTypes(currentTrial)\n        case 1\n            StateOnInitPoke = 'GoLeft';\n            OdorantState = 'OdorLeft';\n        case 2\n            StateOnInitPoke = 'GoRight'; \n            OdorantState = 'OdorRight';\n        case 3\n            StateOnInitPoke = 'GoLeft'; \n            OdorantState = 'OdorOmitLeft';\n        case 4\n            StateOnInitPoke = 'GoRight'; \n            OdorantState = 'OdorOmitRight';\n    end"
  },
  {
    "objectID": "bpod.html#states",
    "href": "bpod.html#states",
    "title": "Bpod",
    "section": "States",
    "text": "States\n    sma = AddState(sma, 'Name', 'Reset', ...\n        'Timer', .5,...\n        'StateChangeConditions', {'Tup', OdorantState},...\n        'OutputActions', {'ValveModule1', 3, 'ValveModule2', 3, 'ValveModule3', 2});  % Reset all valves to 0V\n\n    sma = AddState(sma, 'Name', 'OdorLeft', ...\n        'Timer', 1,...\n        'StateChangeConditions', {'Tup', 'WaitForInitPoke'},...\n        'OutputActions', {'ValveModule1', 1, 'ValveModule2', 2});  % Left odor, right omission\n\n    sma = AddState(sma, 'Name', 'OdorLeft', ...\n            'Timer', 1,...\n            'StateChangeConditions', {'Tup', 'WaitForInitPoke'},...\n            'OutputActions', {'ValveModule1', 1, 'ValveModule2', 2});  % Left odor, right omission\n\n    sma = AddState(sma, 'Name', 'OdorRight', ...\n        'Timer', 1,...\n        'StateChangeConditions', {'Tup', 'WaitForInitPoke'},...\n        'OutputActions', {'ValveModule1', 2, 'ValveModule2', 1});  % Left omission, right odor\n\n    sma = AddState(sma, 'Name', 'OdorOmitLeft', ...\n        'Timer', 1,...\n        'StateChangeConditions', {'Tup', 'WaitForInitPoke'},...\n        'OutputActions', {'ValveModule1', 2, 'ValveModule2', 0});  % Left omission , Right reset (flow through dummy vial)\n\n    sma = AddState(sma, 'Name', 'OdorOmitRight', ...\n        'Timer', 1,...\n        'StateChangeConditions', {'Tup', 'WaitForInitPoke'},...\n        'OutputActions', {'ValveModule1', 0, 'ValveModule2', 2});  % Left dummy , Right omission.\n\n    sma = AddState(sma, 'Name', 'WaitForInitPoke', ...\n        'Timer', 0,...\n        'StateChangeConditions', {'Port3In', StateOnInitPoke},...  % Wait for initiation port poke\n        'OutputActions', {});\n\n    sma = AddState(sma, 'Name', 'GoLeft', ...\n        'Timer', 0,...\n        'StateChangeConditions', {'SoftCode1', 'CorrectLeft', 'SoftCode3', 'NoReward'},...\n        'OutputActions', {'ValveModule3', 1});  % Final valves open\n\n    sma = AddState(sma, 'Name', 'GoRight', ...\n        'Timer', 0,...\n        'StateChangeConditions', {'SoftCode1', 'NoReward', 'SoftCode3', 'CorrectRight'},...\n        'OutputActions', {'ValveModule3', 1});  % Final valves open\n\n    sma = AddState(sma, 'Name', 'Omission', ...\n        'Timer', 0,...\n        'StateChangeConditions', {'SoftCode1', 'NoReward', 'SoftCode3', 'NoReward'},...  % Reward on either side\n        'OutputActions', {'ValveModule3', 1});  % Final valves open\n\n    sma = AddState(sma, 'Name', 'CorrectLeft', ...\n        'Timer', PokeTimer,...\n        'StateChangeConditions', {'Tup', 'ITI', 'Port1In', 'LeftReward'},...\n        'OutputActions', {});  % On decision, reset all valves\n\n    sma = AddState(sma, 'Name', 'CorrectRight', ...\n        'Timer', PokeTimer,...\n        'StateChangeConditions', {'Tup', 'ITI', 'Port2In', 'RightReward'},...\n        'OutputActions', {});  % On decision, reset all valves\n\n    sma = AddState(sma, 'Name', 'NoReward', ... \n        'Timer', PokeTimer,...\n        'StateChangeConditions', {'Tup', 'ITI', 'Port1In', 'ITI', 'Port2In', 'ITI', 'Port3In', 'ITI'},...\n        'OutputActions', {'ValveModule1', 3, 'ValveModule2', 3, 'ValveModule3', 2}); % On decision, reset all valves\n\n    sma = AddState(sma, 'Name', 'LeftReward', ...\n        'Timer', LeftValveTime,...\n        'StateChangeConditions', {'Tup', 'Drinking'},...\n        'OutputActions', {'ValveState', 1, 'ValveModule1', 3, 'ValveModule2', 3, 'ValveModule3', 2});  % On left poke give water & reset valves.\n\n    sma = AddState(sma, 'Name', 'RightReward', ...\n        'Timer', RightValveTime,...\n        'StateChangeConditions', {'Tup', 'Drinking'},...\n        'OutputActions', {'ValveState', 2, 'ValveModule1', 3, 'ValveModule2', 3, 'ValveModule3', 2});  % On right poke give water & reset valves.\n\n    sma = AddState(sma, 'Name', 'Drinking', ...\n        'Timer', 5,...\n        'StateChangeConditions', {'Tup', 'ITI', 'Port1Out', 'ConfirmPortOut', 'Port2Out', 'ConfirmPortOut'},... \n        'OutputActions', {});\n\n    sma = AddState(sma, 'Name', 'ConfirmPortOut', ...\n        'Timer', PortOutDelay,...\n        'StateChangeConditions', {'Tup', 'ITI', 'Port1In', 'Drinking', 'Port2In', 'Drinking'},...\n        'OutputActions', {});\n\n    sma = AddState(sma, 'Name', 'ITI', ... \n        'Timer', iti_list(currentTrial),...\n        'StateChangeConditions', {'Tup', 'exit'},...\n        'OutputActions', {});"
  },
  {
    "objectID": "bpod.html#end_loop",
    "href": "bpod.html#end_loop",
    "title": "Bpod",
    "section": "End Trial Loop",
    "text": "End Trial Loop\nT = BpodTrialManager;\n    T.startTrial(sma)\n    RawEvents = T.getTrialData;\n    if ~isempty(fieldnames(RawEvents)) % If trial data was returned\n        BpodSystem.Data = AddTrialEvents(BpodSystem.Data,RawEvents); %  Computes trial events from raw data\n        BpodSystem.Data.TrialSettings(currentTrial) = S; % Adds the settings used for the current trial to the Data struct (to be saved after the trial ends)\n        BpodSystem.Data.TrialTypes(currentTrial) = TrialTypes(currentTrial); % Adds the trial type of the current trial to data\n        UpdateOutcomePlot(TrialTypes, BpodSystem.Data);\n        SaveBpodSessionData; % Saves the field BpodSystem.Data to the current data file\n    end\n    HandlePauseCondition; % Checks to see if the protocol is paused. If so, waits until user resumes.\n    if BpodSystem.Status.BeingUsed == 0\n        return\n    end\nend"
  }
]