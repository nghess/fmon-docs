[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "FMON Documentation",
    "section": "",
    "text": "Welcome to the documentation for Smear Lab’s Freely Moving Olfactory Navigation (FMON) Rig. This documentation is intended to provide a detailed reference to the FMON Rig and the software that makes it work. You may navigate directly to topics using the navbar at the top of the page, or search for a specific topic or code snippet using the search button at the upper right corner.\nThe rig’s hardware is controlled by a Bpod state machine running in MATLAB and receiving realtime input from Bonsai. All data related to trial state is recorded by Bpod, while all analog electrical signals (e.g. sniff signal) are recorded by Bonsai.\nThe rig can be run either directly from the Bpod Console, or using a custom GUI that is tailored for research assistants to easily run specific FMON experiments. This documentation is fairly detailed, and is not intended for RA training, rather it is meant to serve as a reference for researchers who want to reproduce, repair or modify aspects of the FMON rig."
  },
  {
    "objectID": "hardware.html",
    "href": "hardware.html",
    "title": "Electronics",
    "section": "",
    "text": "Circuit Diagrams and parts list."
  },
  {
    "objectID": "data.html",
    "href": "data.html",
    "title": "Data Acquisition",
    "section": "",
    "text": "At the end of each session, the timeUp() function stops Bpod and Bonsai, then executes fmon_data_output.m, a MATLAB script that saves and summarizes the recently acquired data.\nThe data output script handles copying and saving Bpod session data, NiDAQ data, and video files. Additionally, the script creates a short summary of session information and mouse performance, then saves and displays them as a text file.\nThese data are all saved in the appropriate directory. Directories are organized by mouse ID, session type, and session number."
  },
  {
    "objectID": "data.html#saved-data",
    "href": "data.html#saved-data",
    "title": "Data Acquisition",
    "section": "Saved Data",
    "text": "Saved Data\nIn each session folder you will find:\n\nBpodSessionData.mat\n\nData recorded by Bpod and stored as a MATLAB struct. Includes detailed timing data for state changes and trial events.\n\nNiDAQ_poke.dat\n\nBinary data file containing voltages for left, (ch1) right, (ch2) and initiation reward (ch3) ports.\n\nNiDAQ_sniff.dat\n\nBinary data file containing voltages from thermistor (ch1) camera TTL trigger (ch2) and left (ch3) and right (ch4) final valves.\n\nnotes.txt\n\nSummary file generated at the end of each session. Contains session information, mouse performance, and (optional) experimenter notes.\n\nrawvideo.txt\n\nBonsai timestamps of for each video frame captured.\n\nrawvideo202x-xx-xxTxx_xx_xx.avi\n\nRaw video file captured by Bonsai."
  },
  {
    "objectID": "bonsai.html",
    "href": "bonsai.html",
    "title": "Bonsai",
    "section": "",
    "text": "Bonsai is a visual reactive programming environment that allows users to define and manipulate complex networks of sensors. Bonsai allows for high speed, asynchronous data acquisition and as of November 2023, is actively maintained.\nWe have a developed a Bonsai protocol for the FMON rig that acquires video from a camera above the arena, then applies custom code to track mouse location and share this information with our Bpod protocols in real time.\nBonsai is written in C# and has a relatively steep learning curve. That said, it is an excellent tool, offering high performance and an active community."
  },
  {
    "objectID": "bonsai.html#fmon-bonsai-schematic",
    "href": "bonsai.html#fmon-bonsai-schematic",
    "title": "Bonsai",
    "section": "FMON Bonsai Schematic",
    "text": "FMON Bonsai Schematic\nBelow is a simplified schematic describing the essential structure of the bonsai-fmon.bonsai file.\n\n\n\n\nflowchart LR\n\n    Open_Bpod_COM_Port\n\n    Camera_Capture --&gt; Write_Video_Frame\n    Write_Video_Frame --&gt; Get_Head_Position\n    Camera_Capture --&gt; Get_Centroid_Position\n    Get_Head_Position --&gt; Estimate_Nose_Position\n    Get_Centroid_Position --&gt; Estimate_Nose_Position\n\n    Estimate_Nose_Position --&gt; Send_APP_Softcode_to_COM_Port\n    Estimate_Nose_Position --&gt; Write_Bonsai_TimeStamp\n\n    NiDAQ_Capture --&gt; Write_Binary_Data\n\n\n\n\n\n\n\nThe actual Bonsai file consists of a larger series of image filters and IronPython 2.7 code chunks, but the above schematic describes the overall file architecture and all the core tasks Bonsai performs:\n\nCapturing video\nEstimating realtime mouse position\nSending mouse position to MATLAB\nWriting a timestamp for each video frame\nRecording NiDAQ data."
  },
  {
    "objectID": "bonsai.html#using-bonsai",
    "href": "bonsai.html#using-bonsai",
    "title": "Bonsai",
    "section": "Using Bonsai",
    "text": "Using Bonsai\nUsing bonsai-fmon.bonsai is as simple as opening Bonsai and loading the file. The file should not be started manually, as it started automatically by a Python script executed at the beginning of each Bpod session.\nResearchers should not need to modify the bonsai-fmon.bonsai file, however it is useful to keep an eye on the video feed and realtime tracking. If a video preview doesn’t automatically pop up, it can be accessed by right-clicking the farthest-right “Python Transform” node, selecting “Show Visualizer” and clicking “Bonsai.Vision.Design.IplImageVisualizer.” This resulting visualizer displays realtime video as well as tracked points (centroid, head and nose) of the mouse and the choice boundaries of the task."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "This documentation is organized as a record and reference for the 2023 Build of Smear Lab’s Freely Moving Olfactory Navigation behavioral rig. All materials were produced by Nate Gonzales-Hess for the Smear Lab in fulfillment of his Supporting Area Project in the University of Oregon Psychology PhD Program."
  },
  {
    "objectID": "bpod.html",
    "href": "bpod.html",
    "title": "Bpod Protocol",
    "section": "",
    "text": "This page includes all code used in the fmon_task.m Bpod protocol for the 100-0 task, along with a graph describing the flow of the Bpod state machine.\nThe protocol is designed to be run in conjunction with Bonsai, which uses realtime video tracking to provide SoftCodes to Bpod. APP_SoftCode1 indicates that the mouse has crossed the choice boundary on the left side, APP_Softcode3 indicates that the mouse has crossed on the right, and APP_SoftCode2 indicates that the mouse has yet to cross the choice boundary.\n\nState Machine Flow\n\n\n\n\ngraph TD\n    OdorantState --&gt; OdorLeft\n    OdorantState --&gt; OdorRight\n    OdorantState --&gt; OdorOmitLeft\n    OdorantState --&gt; OdorOmitRight\n    OdorLeft --&gt; WaitForInitPoke\n    OdorRight --&gt; WaitForInitPoke\n    OdorOmitLeft --&gt; WaitForInitPoke\n    OdorOmitRight --&gt; WaitForInitPoke\n    WaitForInitPoke --&gt;|Port3In| StateOnInitPoke\n    StateOnInitPoke --&gt; GoLeft\n    StateOnInitPoke --&gt; GoRight\n    GoLeft --&gt;|APP_SoftCode1| CorrectLeft\n    GoLeft --&gt;|APP_SoftCode3| NoReward\n    GoRight --&gt;|APP_SoftCode1| NoReward\n    GoRight --&gt;|APP_SoftCode3| CorrectRight\n    CorrectLeft --&gt;|Port1In| LeftReward\n    CorrectRight --&gt;|Port2In| RightReward\n    NoReward --&gt; ITI\n    LeftReward --&gt; Drinking\n    RightReward --&gt; Drinking\n    Drinking --&gt;|Tup, Port1Out, Port2Out| ITI\n    ITI --&gt; OdorantState\n\n\n\n\n\n\n\nMATLAB Code\nThe following code chunks are an exact copy of fmon_task.m, broken down into sections for ease of reference.\n\nInitialize Bpod and Start Bonsai\nInitializes the Bpod protocol definition and executes an external Python script to start Bonsai. The Python script uses the pyautogui and pygetwindow libraries to start whichever file is loaded in Bonsai.\nfunction fmon_task\n%% Initialize Bpod\nglobal BpodSystem\nS = BpodSystem.ProtocolSettings;\n\n%% Start Bonsai\n% Run Bonsai connect Python Script\n[~,~] = system('start C:\\ProgramData\\Anaconda3\\python.exe D:\\fmon-bpod\\connect_gui.py');\n% Wait for Bonsai to start\njava.lang.Thread.sleep(1000);\n\n\nSession Timer\nMATLAB timer. Pulls from the “Session Length” field in “Session Info” tab of FMON-GUI.\n%% Set Up Session Timer\n% Get duration from GUI, or use default of 40 minutes.\nif evalin('base', 'exist(''session_duration'', ''var'')')\n    session_duration = evalin('base', 'session_duration');\nelse\n    session_duration = 40;\nend\n\npersistent t  % Declaring t as global so it can be accessed outside function\n\n% If timer from cancelled session is running, stop and delete it.\nif exist('t', 'var') == 1 && isa(t, 'timer')\n    if strcmp(t.Running, 'on')\n        stop(t);\n        disp('Previously started timer stopped.')\n    end\n    delete(t);\nend\n\n% Initialize session timer.\nt = timer;\nt.StartDelay = session_duration * 60;  % time in seconds\n% timeUp is defined at end of this file.\nt.TimerFcn = @(obj, event)timeUp(obj, event, session_duration);  \n\nstart(t);\n\n\nSet up Reward Timings\nSets water valve timings. Pulls valve timings from the “H2O” tab of FMON-GUI.\n%% Set Reward amounts\n% Read variables from workspace, supplied by fmon_prefs.m GUI.\n% If variables don't exist, set to defaults (.1 seconds)\nif evalin('base', 'exist(''LeftValveTime'', ''var'')')\n    LeftValveTime = evalin('base', 'LeftValveTime');\nelse\n    LeftValveTime = 0.1;\nend\n\nif evalin('base', 'exist(''RightValveTime'', ''var'')')\n    RightValveTime = evalin('base', 'RightValveTime');\nelse\n    RightValveTime = 0.1;\nend\n\n% Time to wait before lick port out is confirmed\nPortOutDelay = .5;\n\n% Time to wait for poke after decision. On timeout, ITI begins.\nPokeTimer = 5;\n\n\nGenerate Trials\nCode to generate trial sequence. Below code is for up to 200 trials total. Percentage of omission trials is defined in the fmon_prefs.m GUI. Additionally, code to ensure that no trial type is repeated more than 3 times in a row. Finally, code to construct the ITI list, with min and max ITI times (optionally) defined in the GUI.\n%% Define trials\nnLeftTrials = 100;\nnRightTrials = 100;\npctOmission = evalin('base', 'pct_omission') / 100;\nnOmissionTrials = round((nLeftTrials + nRightTrials) * pctOmission);  % Some percentage of trials are omission trials.\nnOmissionDiff = round(0.5 * nOmissionTrials);  % Half of the omission trials, to substract from left and right trials.\nTrialTypes = [ones(1, nLeftTrials-nOmissionDiff) ones(1, nRightTrials-nOmissionDiff)*2 ones(1, round(nOmissionTrials/2))*3 ones(1, round(nOmissionTrials/2))*4];  % 1 = Left, 2 = Right, 3 = Omission Left, 4 = Omission Right\n\n% Ensure that trial type never repeats more than maxRepeats times\nmaxRepeats = 3; % maximum repeat limit\n\n% A function to check if any element repeats more than maxRepeats times\ncheckRepeats = @(v, m) any(conv(double(diff(v) == 0), ones(1, m), 'valid') == m);\n\n% Randomly permute vector until no element repeats more than maxRepeats times\nwhile true\n    vec_perm = TrialTypes(randperm(length(TrialTypes)));\n    if ~checkRepeats(vec_perm, maxRepeats)\n        break\n    end\nend\n\nassignin('base', 'vec_perm', vec_perm);\n\nTrialTypes = vec_perm;\nBpodSystem.Data.TrialTypes = []; % The trial type of each trial completed will be added here.\nMaxTrials = length(TrialTypes);%nLeftTrials + nRightTrials + nOmissionTrials;\n\n%% Build ITI list\n% Read variables from workspace, supplied by fmon_prefs GUI.\nif evalin('base', 'exist(''min_iti'', ''var'')')\n    min_iti = evalin('base', 'min_iti');\nelse\n    min_iti = 1;\nend\n\nif evalin('base', 'exist(''max_iti'', ''var'')')\n    max_iti = evalin('base', 'max_iti');\nelse\n    max_iti = 5;\nend\n\n% Create ITI list\niti_list = round((max_iti-min_iti) .* rand(1,length(TrialTypes)) + min_iti);\n\n\nTrial Outcome Plots\nGenerates a visualization of trial type and outcome that updates after the completion of each trial.\nBpodSystem.ProtocolFigures.OutcomePlotFig = figure('Position', [50 540 1000 250],'name','Outcome plot','numbertitle','off', 'MenuBar', 'none', 'Resize', 'off');\nBpodSystem.GUIHandles.OutcomePlot = axes('Position', [.075 .3 .89 .6]);\nTrialTypeOutcomePlot(BpodSystem.GUIHandles.OutcomePlot,'init',TrialTypes);\n\n\nBegin Trial Loop\nBeginning of for loop iterating over trials. Additionally, definitions of serial messages to be sent to olfactometer and final valves. The ‘switch’ control statement changes the definitions of StateOnInitPoke and OdorantState according to which TrialType is currently being executed.\n%% Main trial loop\nfor currentTrial = 1:MaxTrials\n    \n    % Valve Module serial messages, 1 = Odor, 2 = Omission, 3 = Reset\n    LoadSerialMessages('ValveModule1', {['B' 15], ['B' 195], ['B' 0]});  % Left valves: 15 = Odor, 195 = Omission, 0 = Reset\n    LoadSerialMessages('ValveModule2', {['B' 15], ['B' 195], ['B' 0]});  % Right valves: 15 = Odor, 195 = Omission, 0 = Reset\n    LoadSerialMessages('ValveModule3', {['B' 3], ['B' 0]});  % Final Valves\n    \n    % Determine trial-specific state matrix fields\n    switch TrialTypes(currentTrial)\n        case 1\n            StateOnInitPoke = 'GoLeft';\n            OdorantState = 'OdorLeft';\n        case 2\n            StateOnInitPoke = 'GoRight'; \n            OdorantState = 'OdorRight';\n        case 3\n            StateOnInitPoke = 'GoLeft'; \n            OdorantState = 'OdorOmitLeft';\n        case 4\n            StateOnInitPoke = 'GoRight'; \n            OdorantState = 'OdorOmitRight';\n    end\n\n\nStates\nDefinitions of each state in the experiment. The structure of each state is straightforward:\n\n‘Timer’ sets a timer in seconds (‘Tup’ means timer has expired)\n‘StateChangeConditions’ takes argument pairs of events and the resulting state change.\n\ne.g. {‘Tup’, ‘WaitForInitPoke’} means when the timer has expired, the state changes to WaitForInitPoke.\nEach state can take an arbitrary number of ‘StateChangeConditions’ argument pairs.\n\n\n    % Initialize new state machine description\n    sma = NewStateMachine(); \n    \n    % State definitions    \n    sma = AddState(sma, 'Name', 'Reset', ...\n        'Timer', .5,...\n        'StateChangeConditions', {'Tup', OdorantState},...\n        'OutputActions', {'ValveModule1', 3, 'ValveModule2', 3, 'ValveModule3', 2});  % Reset all valves to 0V\n    \n    sma = AddState(sma, 'Name', 'OdorLeft', ...\n        'Timer', 1,...\n        'StateChangeConditions', {'Tup', 'WaitForInitPoke'},...\n        'OutputActions', {'ValveModule1', 1, 'ValveModule2', 2});  % Left odor, right omission\n\n    sma = AddState(sma, 'Name', 'OdorRight', ...\n        'Timer', 1,...\n        'StateChangeConditions', {'Tup', 'WaitForInitPoke'},...\n        'OutputActions', {'ValveModule1', 2, 'ValveModule2', 1});  % Left omission, right odor\n    \n    sma = AddState(sma, 'Name', 'OdorOmit', ...\n        'Timer', 1,...\n        'StateChangeConditions', {'Tup', 'WaitForInitPoke'},...\n        'OutputActions', {'ValveModule1', 2, 'ValveModule2', 2});  % Both omission valves open to mask audio cue\n\n    sma = AddState(sma, 'Name', 'WaitForInitPoke', ...\n        'Timer', 0,...\n        'StateChangeConditions', {'Port3In', StateOnInitPoke},...  % Wait for initiation port poke\n        'OutputActions', {});\n\n    sma = AddState(sma, 'Name', 'GoLeft', ...\n        'Timer', .1,...\n        'StateChangeConditions', {L_sector, 'CorrectLeft', R_sector, 'NoReward'},...\n        'OutputActions', {'ValveModule3', 1});  % Final valves open\n    \n    sma = AddState(sma, 'Name', 'GoRight', ...\n        'Timer', .1,...\n        'StateChangeConditions', {L_sector, 'NoReward', R_sector, 'CorrectRight'},...\n        'OutputActions', {'ValveModule3', 1});  % Both Final valves open\n    \n    sma = AddState(sma, 'Name', 'GoLeftOmit', ...\n        'Timer', .1,...\n        'StateChangeConditions', {L_sector, 'CorrectLeft', R_sector, 'NoReward'},...\n        'OutputActions', {'ValveModule3', 1});  % Left Final valve opens\n    \n    sma = AddState(sma, 'Name', 'GoRightOmit', ...\n        'Timer', .1,...\n        'StateChangeConditions', {L_sector, 'NoReward', R_sector, 'CorrectRight'},...\n        'OutputActions', {'ValveModule3', 1});  % Right Final valve opens\n\n    sma = AddState(sma, 'Name', 'CorrectLeft', ...\n        'Timer', PokeTimer,...\n        'StateChangeConditions', {'Tup', 'ITI', 'Port1In', 'LeftReward'},...\n        'OutputActions', {});  % On decision, reset all valves\n\n    sma = AddState(sma, 'Name', 'CorrectRight', ...\n        'Timer', PokeTimer,...\n        'StateChangeConditions', {'Tup', 'ITI', 'Port2In', 'RightReward'},...\n        'OutputActions', {});  % On decision, reset all valves\n\n    sma = AddState(sma, 'Name', 'NoReward', ... \n        'Timer', PokeTimer,...\n        'StateChangeConditions', {'Tup', 'ITI', 'Port1In', 'ITI', 'Port2In', 'ITI', 'Port3In', 'ITI'},...\n        'OutputActions', {'ValveModule1', 3, 'ValveModule2', 3, 'ValveModule3', 2}); % On decision, reset all valves\n    \n    sma = AddState(sma, 'Name', 'LeftReward', ...\n        'Timer', LeftValveTime,...\n        'StateChangeConditions', {'Tup', 'Drinking'},...\n        'OutputActions', {'ValveState', 1, 'ValveModule1', 3, 'ValveModule2', 3, 'ValveModule3', 2});  % On left poke give water & reset valves.\n    \n    sma = AddState(sma, 'Name', 'RightReward', ...\n        'Timer', RightValveTime,...\n        'StateChangeConditions', {'Tup', 'Drinking'},...\n        'OutputActions', {'ValveState', 2, 'ValveModule1', 3, 'ValveModule2', 3, 'ValveModule3', 2});  % On right poke give water & reset valves.\n    \n    sma = AddState(sma, 'Name', 'Drinking', ...\n        'Timer', 5,...\n        'StateChangeConditions', {'Tup', 'ITI', 'Port1Out', 'ConfirmPortOut', 'Port2Out', 'ConfirmPortOut'},... \n        'OutputActions', {});\n    \n    sma = AddState(sma, 'Name', 'ConfirmPortOut', ...\n        'Timer', PortOutDelay,...\n        'StateChangeConditions', {'Tup', 'ITI', 'Port1In', 'Drinking', 'Port2In', 'Drinking'},...\n        'OutputActions', {});\n    \n    sma = AddState(sma, 'Name', 'ITI', ... \n        'Timer', iti_list(currentTrial),...\n        'StateChangeConditions', {'Tup', 'exit'},...\n        'OutputActions', {}); \n\n\nEnd Trial Loop\nCode to save data from the most recent trial. This code is Bpod boilerplate and should not be modified unless the user knows exactly what they are doing.\nT = BpodTrialManager;\n    T.startTrial(sma)\n    RawEvents = T.getTrialData;\n    if ~isempty(fieldnames(RawEvents)) % If trial data was returned\n        BpodSystem.Data = AddTrialEvents(BpodSystem.Data,RawEvents); %  Computes trial events from raw data\n        BpodSystem.Data.TrialSettings(currentTrial) = S; % Adds the settings used for the current trial to the Data struct (to be saved after the trial ends)\n        BpodSystem.Data.TrialTypes(currentTrial) = TrialTypes(currentTrial); % Adds the trial type of the current trial to data\n        UpdateOutcomePlot(TrialTypes, BpodSystem.Data);\n        SaveBpodSessionData; % Saves the field BpodSystem.Data to the current data file\n    end\n    HandlePauseCondition; % Checks to see if the protocol is paused. If so, waits until user resumes.\n    if BpodSystem.Status.BeingUsed == 0\n        return\n    end\nend\n\n\nUpdate Outcome Plot\nThis function updates the trial outcome plot while the session is running. Outcome plot displays trial types and whether mouse gave a correct or incorrect choice.\nfunction UpdateOutcomePlot(TrialTypes, Data)\n    global BpodSystem\n    Outcomes = zeros(1,Data.nTrials);\n    for x = 1:Data.nTrials\n        if ~isnan(Data.RawEvents.Trial{x}.States.Drinking(1))\n            Outcomes(x) = 1;\n        else\n            Outcomes(x) = 3;\n        end\n    end\n    TrialTypeOutcomePlot(BpodSystem.GUIHandles.OutcomePlot,'update',Data.nTrials+1,TrialTypes,Outcomes);\n\n\ntimeUp Function\nWhen session duration (as defined in the “Session Info” tab of the GUI) expires, the timeUp function is executed. This function stops the Bpod protocol, stops Bonsai, then runs a data ouput script to summarize and save the session’s data.\n%% Execute when time is up:\nfunction timeUp(obj, event, duration)\n    disp(num2str(duration) + \" minutes have elapsed! The session has ended.\");  % Print to console, maybe make this an alert\n    RunProtocol('Stop');  % Stop the protocol\n    java.lang.Thread.sleep(1000);\n    [~,~] = system('start C:\\ProgramData\\Anaconda3\\python.exe D:\\fmon-bpod\\disconnect_gui.py'); % Stop Bonsai\n    disp('Running data output script...');\n    run('D:\\fmon-bpod\\fmon_data_output_aw.m'); % Run data output script"
  },
  {
    "objectID": "gui.html",
    "href": "gui.html",
    "title": "MATLAB GUI",
    "section": "",
    "text": "fmon_prefs.m is a Graphical User Interface built using the MATLAB App Designer. The purpose of the app is to give researchers a code-free way to customize and run Bpod protocols. It is currently only set up for 100-0 and FMON-Trainer protocols.\nThe GUI has three panes: H2O, Session Info, and Run Protocol."
  },
  {
    "objectID": "gui.html#h2o",
    "href": "gui.html#h2o",
    "title": "MATLAB GUI",
    "section": "H2O",
    "text": "H2O\nThe H2O tab contains a button to flush water tubes, as well as a button to calibrate valve timings. Calibration runs trigger each selected valve for 100 repetitions. Individual valves can be deselected to be excluded from the calibration run. Once the user navigates to another tab, valve timings are sent to the MATLAB to be referenced by the Bpod protocol."
  },
  {
    "objectID": "gui.html#session-info",
    "href": "gui.html#session-info",
    "title": "MATLAB GUI",
    "section": "Session Info",
    "text": "Session Info\nThe Session Info tab contains information particular to the session. With the exception of Drug Dose and Total Injection, all fields must be filled out for the protocol to run.\nWhile fields listed under “Session Information” pertain to metadata about the session, fields listed under “Experiment Information” set variables that are referenced by the Bpod protocol. These fields are “Session Length”, “Min ITI”, “Max ITI”, and “Percent Omission.” Upon successful submission of session information, a success dialogue indicates that the Bpod protocol is ready to run."
  },
  {
    "objectID": "gui.html#run-protocol",
    "href": "gui.html#run-protocol",
    "title": "MATLAB GUI",
    "section": "Run Protocol",
    "text": "Run Protocol\nThe Run Protocol tab consists of a single button. By clicking it you will launch the Bpod protocol indicated inside the button, configured with the parameters set in the previous two tabs."
  }
]